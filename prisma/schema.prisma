generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Gamification
  level         Int      @default(1)
  xp            Int      @default(0)
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActiveDate DateTime?
  
  // Relations
  courses          UserCourse[]
  questionAttempts QuestionAttempt[]
  assessments      UserAssessment[]
  
  @@map("users")
}

// ============================================
// COURSE STRUCTURE
// ============================================

model Course {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // For UI theming
  icon        String?  // Icon identifier
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  topics      Topic[]
  users       UserCourse[]
  assessments Assessment[]
  
  @@map("courses")
}

model Topic {
  id          String   @id @default(cuid())
  name        String
  description String?
  score       Int      // Display score within course
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  subtopics   Subtopic[]
  assessmentTopics AssessmentTopic[]
  
  @@index([courseId])
  @@map("topics")
}

model Subtopic {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int      // Display order within topic
  topicId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  topic       Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions   Question[]
  
  @@index([topicId])
  @@map("subtopics")
}

// ============================================
// QUESTIONS
// ============================================

model Question {
  id            String   @id @default(cuid())
  question      String   @db.Text
  correctAnswer String
  wrongAnswer1  String?
  wrongAnswer2  String?
  wrongAnswer3  String?
  explanation   String?  @db.Text
  difficulty    Int      @default(1) // 1-5 scale
  subtopicId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  subtopic      Subtopic          @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  attempts      QuestionAttempt[]
  
  @@index([subtopicId])
  @@index([difficulty])
  @@map("questions")
}

// ============================================
// USER PROGRESS & ACTIVE RECALL
// ============================================

model QuestionAttempt {
  id              String   @id @default(cuid())
  userId          String
  questionId      String
  isCorrect       Boolean
  timeSpent       Int?     // milliseconds
  answeredAt      DateTime @default(now())
  
  // Active Recall Algorithm Fields
  easeFactor      Float    @default(2.5)  // SM-2 algorithm
  interval        Int      @default(0)    // Days until next review
  repetitions     Int      @default(0)    // Number of successful reviews
  nextReviewDate  DateTime?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@index([userId, questionId])
  @@index([userId, nextReviewDate])
  @@map("question_attempts")
}

// ============================================
// USER COURSES (ENROLLMENT)
// ============================================
model UserCourse {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@map("user_courses")
}

// ============================================
// ASSESSMENTS
// ============================================

model Assessment {
  id          String   @id @default(cuid())
  name        String
  courseId    String
  date        DateTime
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  topics      AssessmentTopic[]
  users       UserAssessment[]
  
  @@index([courseId])
  @@index([date])
  @@map("assessments")
}

model AssessmentTopic {
  id           String @id @default(cuid())
  assessmentId String
  topicId      String
  
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  topic        Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  @@unique([assessmentId, topicId])
  @@map("assessment_topics")
}

model UserAssessment {
  id           String   @id @default(cuid())
  userId       String
  assessmentId String
  isCompleted  Boolean  @default(false)
  score        Int?
  completedAt  DateTime?
  
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, assessmentId])
  @@index([userId])
  @@map("user_assessments")
}